     1                                  ; Nate Jackson
     2                                  ; CSC322
     3                                  ; P4
     4                                  ; 10/12/22
     5                                  ; Finds the first 16 Fibonacci numbers
     6                                  
     7                                  SECTION .data
     8                                  ; define data/variables here.  Think DB, DW, DD, DQ
     9                                   
    10                                  
    11                                  SECTION .bss
    12                                  ; define uninitialized data here
    13 00000000 <res 00000020>          Fibs:	RESW 16
    14                                  
    15                                  SECTION .text
    16                                  global _main
    17                                  _main:
    18                                  
    19                                  ; put your code here.
    20 00000000 66B80000                mov AX,0
    21 00000004 66BB0100                mov BX,1
    22 00000008 66A3[00000000]          mov [Fibs],AX
    23 0000000E 66891D[02000000]        mov [Fibs+2],BX
    24 00000015 6601D8                  add AX,BX
    25 00000018 66A3[04000000]          mov [Fibs+4],AX
    26 0000001E 6601D8                  add AX,BX
    27 00000021 66A3[06000000]          mov [Fibs+6],AX
    28 00000027 668B1D[04000000]        mov BX, [Fibs+4]
    29 0000002E 6601D8                  add AX, BX
    30 00000031 66A3[08000000]          mov [Fibs+8],AX
    31 00000037 668B1D[06000000]        mov BX, [Fibs +6]
    32 0000003E 6601D8                  add AX, BX
    33 00000041 66A3[0A000000]          mov [Fibs+10],AX
    34 00000047 668B1D[08000000]        mov BX, [Fibs+8]
    35 0000004E 6601D8                  add AX, BX
    36 00000051 66A3[0C000000]          mov [Fibs+12],AX
    37 00000057 668B1D[0A000000]        mov BX, [Fibs+10]
    38 0000005E 6601D8                  add AX, BX
    39 00000061 66A3[0E000000]          mov [Fibs+14],AX
    40 00000067 668B1D[0C000000]        mov BX, [Fibs+12]
    41 0000006E 6601D8                  add AX, BX
    42 00000071 66A3[10000000]          mov [Fibs+16],AX
    43 00000077 668B1D[0E000000]        mov BX, [Fibs+14]
    44 0000007E 6601D8                  add AX,BX
    45 00000081 66A3[12000000]          mov [Fibs+18],AX
    46 00000087 668B1D[10000000]        mov BX, [Fibs+16]
    47 0000008E 6601D8                  add AX,BX
    48 00000091 66A3[14000000]          mov [Fibs+20],AX
    49 00000097 668B1D[12000000]        mov BX, [Fibs+18]
    50 0000009E 6601D8                  add AX,BX
    51 000000A1 66A3[16000000]          mov [Fibs+22],AX
    52 000000A7 668B1D[14000000]        mov BX,[Fibs+20]
    53 000000AE 6601D8                  add AX,BX
    54 000000B1 66A3[18000000]          mov [Fibs+24],AX
    55 000000B7 668B1D[16000000]        mov BX,[Fibs+22]
    56 000000BE 6601D8                  add AX, BX
    57 000000C1 66A3[1A000000]          mov [Fibs+26],AX
    58 000000C7 668B1D[18000000]        mov BX,[Fibs+24]
    59 000000CE 6601D8                  add AX,BX
    60 000000D1 66A3[1C000000]          mov [Fibs+28],AX
    61 000000D7 668B1D[1A000000]        mov BX,[Fibs+26]
    62 000000DE 6601D8                  add AX,BX
    63 000000E1 66A3[1E000000]          mov [Fibs+30],AX
    64 000000E7 668B1D[1C000000]        mov BX,[Fibs+28]
    65 000000EE 6601D8                  add AX,BX
    66 000000F1 66A3[20000000]          mov [Fibs+32],AX
    67                                  
    68                                  lastBreak:
    69                                  
    70                                  ; Normal termination code
    71 000000F7 B801000000              mov eax, 1
    72 000000FC BB00000000              mov ebx, 0
    73 00000101 CD80                    int 80h
